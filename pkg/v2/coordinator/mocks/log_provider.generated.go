// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	ocr2keepers "github.com/smartcontractkit/ocr2keepers/pkg"
)

// LogProvider is an autogenerated mock type for the LogProvider type
type LogProvider struct {
	mock.Mock
}

// PerformLogs provides a mock function with given fields: _a0
func (_m *LogProvider) PerformLogs(_a0 context.Context) ([]ocr2keepers.PerformLog, error) {
	ret := _m.Called(_a0)

	var r0 []ocr2keepers.PerformLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ocr2keepers.PerformLog, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ocr2keepers.PerformLog); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ocr2keepers.PerformLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StaleReportLogs provides a mock function with given fields: _a0
func (_m *LogProvider) StaleReportLogs(_a0 context.Context) ([]ocr2keepers.StaleReportLog, error) {
	ret := _m.Called(_a0)

	var r0 []ocr2keepers.StaleReportLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ocr2keepers.StaleReportLog, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ocr2keepers.StaleReportLog); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ocr2keepers.StaleReportLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogProvider creates a new instance of LogProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogProvider(t mockConstructorTestingTNewLogProvider) *LogProvider {
	mock := &LogProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
