// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	"testing"

	"github.com/smartcontractkit/ocr2keepers/pkg/types"
	"github.com/stretchr/testify/mock"
)

// MockReportEncoder is an autogenerated mock type for the ReportEncoder type
type MockReportEncoder struct {
	mock.Mock
}

// DecodeReport provides a mock function with given fields: _a0
func (_m *MockReportEncoder) DecodeReport(_a0 []byte) ([]types.UpkeepResult, error) {
	ret := _m.Called(_a0)

	var r0 []types.UpkeepResult
	if rf, ok := ret.Get(0).(func([]byte) []types.UpkeepResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UpkeepResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeReport provides a mock function with given fields: _a0
func (_m *MockReportEncoder) EncodeReport(_a0 []types.UpkeepResult) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]types.UpkeepResult) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.UpkeepResult) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockReportEncoder creates a new instance of MockReportEncoder. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReportEncoder(t testing.TB) *MockReportEncoder {
	mock := &MockReportEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
