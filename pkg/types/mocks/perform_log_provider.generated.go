// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/smartcontractkit/ocr2keepers/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// PerformLogProvider is an autogenerated mock type for the PerformLogProvider type
type PerformLogProvider struct {
	mock.Mock
}

// PerformLogs provides a mock function with given fields: _a0
func (_m *PerformLogProvider) PerformLogs(_a0 context.Context) ([]types.PerformLog, error) {
	ret := _m.Called(_a0)

	var r0 []types.PerformLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.PerformLog, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.PerformLog); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PerformLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StaleReportLogs provides a mock function with given fields: _a0
func (_m *PerformLogProvider) StaleReportLogs(_a0 context.Context) ([]types.StaleReportLog, error) {
	ret := _m.Called(_a0)

	var r0 []types.StaleReportLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.StaleReportLog, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.StaleReportLog); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StaleReportLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPerformLogProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewPerformLogProvider creates a new instance of PerformLogProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPerformLogProvider(t mockConstructorTestingTNewPerformLogProvider) *PerformLogProvider {
	mock := &PerformLogProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
