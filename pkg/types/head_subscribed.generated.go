// Code generated by mockery v2.12.1. DO NOT EDIT.

package types

import (
	context "context"

	ethereum "github.com/ethereum/go-ethereum"
	coretypes "github.com/ethereum/go-ethereum/core/types"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockHeadSubscriber is an autogenerated mock type for the HeadSubscriber type
type MockHeadSubscriber struct {
	mock.Mock
}

// SubscribeNewHead provides a mock function with given fields: ctx, ch
func (_m *MockHeadSubscriber) SubscribeNewHead(ctx context.Context, ch chan<- *coretypes.Header) (ethereum.Subscription, error) {
	ret := _m.Called(ctx, ch)

	var r0 ethereum.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *coretypes.Header) ethereum.Subscription); ok {
		r0 = rf(ctx, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethereum.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chan<- *coretypes.Header) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockHeadSubscriber creates a new instance of MockHeadSubscriber. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHeadSubscriber(t testing.TB) *MockHeadSubscriber {
	mock := &MockHeadSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
