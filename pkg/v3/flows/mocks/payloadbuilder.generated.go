// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	ocr2keepers "github.com/smartcontractkit/ocr2keepers/pkg"
	mock "github.com/stretchr/testify/mock"
)

// MockPayloadBuilder is an autogenerated mock type for the PayloadBuilder type
type MockPayloadBuilder struct {
	mock.Mock
}

// BuildPayload provides a mock function with given fields: trigger, block
func (_m *MockPayloadBuilder) BuildPayload(trigger string, block ocr2keepers.BlockKey) (ocr2keepers.UpkeepPayload, error) {
	ret := _m.Called(trigger, block)

	var r0 ocr2keepers.UpkeepPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ocr2keepers.BlockKey) (ocr2keepers.UpkeepPayload, error)); ok {
		return rf(trigger, block)
	}
	if rf, ok := ret.Get(0).(func(string, ocr2keepers.BlockKey) ocr2keepers.UpkeepPayload); ok {
		r0 = rf(trigger, block)
	} else {
		r0 = ret.Get(0).(ocr2keepers.UpkeepPayload)
	}

	if rf, ok := ret.Get(1).(func(string, ocr2keepers.BlockKey) error); ok {
		r1 = rf(trigger, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPayloadBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPayloadBuilder creates a new instance of MockPayloadBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPayloadBuilder(t mockConstructorTestingTNewMockPayloadBuilder) *MockPayloadBuilder {
	mock := &MockPayloadBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
