// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	store "github.com/smartcontractkit/ocr2keepers/pkg/v3/store"
	mock "github.com/stretchr/testify/mock"
)

// MockMetadataStore is an autogenerated mock type for the MetadataStore type
type MockMetadataStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *MockMetadataStore) Get(_a0 store.MetadataKey) (interface{}, bool) {
	ret := _m.Called(_a0)

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(store.MetadataKey) (interface{}, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(store.MetadataKey) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(store.MetadataKey) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *MockMetadataStore) Set(_a0 store.MetadataKey, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewMockMetadataStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMetadataStore creates a new instance of MockMetadataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMetadataStore(t mockConstructorTestingTNewMockMetadataStore) *MockMetadataStore {
	mock := &MockMetadataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
