// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	automation "github.com/smartcontractkit/chainlink-common/pkg/types/automation"

	mock "github.com/stretchr/testify/mock"
)

// MockCoordinator is an autogenerated mock type for the Coordinator type
type MockCoordinator struct {
	mock.Mock
}

// Accept provides a mock function with given fields: _a0
func (_m *MockCoordinator) Accept(_a0 automation.ReportedUpkeep) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(automation.ReportedUpkeep) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FilterProposals provides a mock function with given fields: _a0
func (_m *MockCoordinator) FilterProposals(_a0 []automation.CoordinatedBlockProposal) ([]automation.CoordinatedBlockProposal, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FilterProposals")
	}

	var r0 []automation.CoordinatedBlockProposal
	var r1 error
	if rf, ok := ret.Get(0).(func([]automation.CoordinatedBlockProposal) ([]automation.CoordinatedBlockProposal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]automation.CoordinatedBlockProposal) []automation.CoordinatedBlockProposal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]automation.CoordinatedBlockProposal)
		}
	}

	if rf, ok := ret.Get(1).(func([]automation.CoordinatedBlockProposal) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterResults provides a mock function with given fields: _a0
func (_m *MockCoordinator) FilterResults(_a0 []automation.CheckResult) ([]automation.CheckResult, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FilterResults")
	}

	var r0 []automation.CheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func([]automation.CheckResult) ([]automation.CheckResult, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]automation.CheckResult) []automation.CheckResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]automation.CheckResult)
		}
	}

	if rf, ok := ret.Get(1).(func([]automation.CheckResult) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreProcess provides a mock function with given fields: _a0, payloads
func (_m *MockCoordinator) PreProcess(_a0 context.Context, payloads []automation.UpkeepPayload) ([]automation.UpkeepPayload, error) {
	ret := _m.Called(_a0, payloads)

	if len(ret) == 0 {
		panic("no return value specified for PreProcess")
	}

	var r0 []automation.UpkeepPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []automation.UpkeepPayload) ([]automation.UpkeepPayload, error)); ok {
		return rf(_a0, payloads)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []automation.UpkeepPayload) []automation.UpkeepPayload); ok {
		r0 = rf(_a0, payloads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]automation.UpkeepPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []automation.UpkeepPayload) error); ok {
		r1 = rf(_a0, payloads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldTransmit provides a mock function with given fields: _a0
func (_m *MockCoordinator) ShouldTransmit(_a0 automation.ReportedUpkeep) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ShouldTransmit")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(automation.ReportedUpkeep) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockCoordinator creates a new instance of MockCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoordinator {
	mock := &MockCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
