// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// MockMaliciousUpkeepProvider is an autogenerated mock type for the MaliciousUpkeepProvider type
type MockMaliciousUpkeepProvider struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockMaliciousUpkeepProvider) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMaliciousUpkeepIds provides a mock function with given fields: _a0
func (_m *MockMaliciousUpkeepProvider) GetMaliciousUpkeepIds(_a0 context.Context) ([]*big.Int, error) {
	ret := _m.Called(_a0)

	var r0 []*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*big.Int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*big.Int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0
func (_m *MockMaliciousUpkeepProvider) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMaliciousUpkeepProvider creates a new instance of MockMaliciousUpkeepProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaliciousUpkeepProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaliciousUpkeepProvider {
	mock := &MockMaliciousUpkeepProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
