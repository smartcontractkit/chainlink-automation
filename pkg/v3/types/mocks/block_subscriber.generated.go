// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	types "github.com/smartcontractkit/ocr2keepers/pkg/v3/types"
	mock "github.com/stretchr/testify/mock"
)

// MockBlockSubscriber is an autogenerated mock type for the BlockSubscriber type
type MockBlockSubscriber struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields:
func (_m *MockBlockSubscriber) Subscribe() (int, chan types.BlockHistory, error) {
	ret := _m.Called()

	var r0 int
	var r1 chan types.BlockHistory
	var r2 error
	if rf, ok := ret.Get(0).(func() (int, chan types.BlockHistory, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() chan types.BlockHistory); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan types.BlockHistory)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Unsubscribe provides a mock function with given fields: _a0
func (_m *MockBlockSubscriber) Unsubscribe(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockBlockSubscriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBlockSubscriber creates a new instance of MockBlockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBlockSubscriber(t mockConstructorTestingTNewMockBlockSubscriber) *MockBlockSubscriber {
	mock := &MockBlockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
